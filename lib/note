
  Container boxCredit(
      {required String cardName,
      required String expiredCard,
      required String numberCard}) {
    return Container(
      height: Dimensions.height185(context),
      width: Dimensions.screenWidht(context),
      decoration: BoxDecoration(boxShadow: [
        BoxShadow(color: Colors.white.withOpacity(.5), spreadRadius: .3)
      ], borderRadius: BorderRadius.circular(10), color: Colors.white),
      child: Stack(
        children: [
          positionCardInformation(
              text: numberCard,
              bottom: Dimensions.height75(context),
              fontSize: Dimensions.font20(context),
              fontWeight: FontWeight.bold),
          positionCardInformation(
              bottom: Dimensions.height30(context),
              fontSize: Dimensions.font12(context),
              fontWeight: FontWeight.w600,
              text: cardName),
          positionCardInformation(
              bottom: Dimensions.height10(context),
              fontSize: Dimensions.font12(context),
              fontWeight: FontWeight.w600,
              text: expiredCard),
          logoCard(left: Dimensions.widht15(context)),
          logoCard(isDefault: false, left: Dimensions.widht30(context)),
          gradientCreditCart(
              color: ColorClass.effectCard.withOpacity(.25),
              right: Dimensions.minWidht100(context)),
          gradientCreditCart(
              color: ColorClass.effectCard.withOpacity(.25),
              right: Dimensions.minWidht150(context)),
          gradientCreditCart(
              color: ColorClass.effectCard.withOpacity(.35),
              right: Dimensions.minWidht200(context)),
          Positioned(
              right: Dimensions.widht15(context),
              bottom: Dimensions.height15(context),
              child: SizedBox(
                  height: Dimensions.height30(context),
                  width: Dimensions.widht45(context),
                  child: Image.asset(ImageClass.chip))),
        ],
      ),
    );
  }

  Positioned gradientCreditCart({required Color color, required double right}) {
    return Positioned(
      top: Dimensions.minHeight25(context),
      right: right,
      child: Transform.rotate(
        angle: math.pi / 4,
        child: Container(
          height: Dimensions.height250(context),
          width: Dimensions.widht250(context),
          decoration: BoxDecoration(
              color: color, borderRadius: BorderRadius.circular(60)),
        ),
      ),
    );
  }

  Positioned positionCardInformation(
      {required String text,
      required double bottom,
      required double fontSize,
      required FontWeight fontWeight}) {
    return Positioned(
        bottom: bottom,
        left: Dimensions.widht15(context),
        child: Column(
          children: [
            InterFont(
                text: text,
                fontSize: fontSize,
                fontWeight: fontWeight,
                colors: ColorClass.background),
          ],
        ));
  }

  Positioned logoCard({bool isDefault = true, required double left}) {
    return Positioned(
      top: Dimensions.height10(context),
      left: left,
      child: Container(
        height: Dimensions.height28(context),
        width: Dimensions.widht28(context),
        decoration: BoxDecoration(
            color: isDefault
                ? ColorClass.logoCard1.withOpacity(.9)
                : ColorClass.logoCard2.withOpacity(.9),
            shape: BoxShape.circle),
      ),
    );
  }
}

class MyCustomClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    Path path = Path();
    path.moveTo(size.width / 2, 0);
    path.lineTo(size.width, 0);
    path.lineTo(0, size.height);
    path.lineTo(size.width, 0);
    path.close();
    return path;
  }

  @override
  bool shouldReclip(covariant CustomClipper<Path> oldClipper) => false;
}
